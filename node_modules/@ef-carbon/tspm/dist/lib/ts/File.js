var __rest = this && this.__rest || function (s, e) {
    var t = {};
    for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === 'function')
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)
            if (e.indexOf(p[i]) < 0)
                t[p[i]] = s[p[i]];
    return t;
};
var __await = this && this.__await || function (v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
};
var __asyncValues = this && this.__asyncValues || function (o) {
    if (!Symbol.asyncIterator)
        throw new TypeError('Symbol.asyncIterator is not defined.');
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === 'function' ? __values(o) : o[Symbol.iterator](), i = {}, verb('next'), verb('throw'), verb('return'), i[Symbol.asyncIterator] = function () {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function (v) {
            return new Promise(function (resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function (v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
};
var __asyncDelegator = this && this.__asyncDelegator || function (o) {
    var i, p;
    return i = {}, verb('next'), verb('throw', function (e) {
        throw e;
    }), verb('return'), i[Symbol.iterator] = function () {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function (v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === 'return'
            } : f ? f(v) : v;
        } : f;
    }
};
var __asyncGenerator = this && this.__asyncGenerator || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
        throw new TypeError('Symbol.asyncIterator is not defined.');
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb('next'), verb('throw'), verb('return'), i[Symbol.asyncIterator] = function () {
        return this;
    }, i;
    function verb(n) {
        if (g[n])
            i[n] = function (v) {
                return new Promise(function (a, b) {
                    q.push([
                        n,
                        v,
                        a,
                        b
                    ]) > 1 || resume(n, v);
                });
            };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume('next', value);
    }
    function reject(value) {
        resume('throw', value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
    }
};
import {
    readFile as readFileSync,
    writeFile as writeFileSync
} from 'fs';
import {
    createPrinter,
    createSourceFile,
    EmitHint,
    ScriptTarget,
    SyntaxKind
} from 'typescript';
import { promisify } from 'util';
import ParseError from '../error/Parse';
import Base from '../File';
import Export from './Export';
import Import from './Import';
const readFile = promisify(readFileSync);
const writeFile = promisify(writeFileSync);
export default class File extends Base {
    constructor(_a) {
        var options = __rest(_a, []);
        super(Object.assign({}, options, { extension: '.d.ts' }));
        this.sourceFile = undefined;
    }
    get ast() {
        if (this.sourceFile) {
            return Promise.resolve(this.sourceFile);
        } else {
            return (async () => {
                const data = await readFile(this.destination.toString(), 'utf-8');
                try {
                    return this.sourceFile = createSourceFile(this.destination.toString(), data, ScriptTarget.Latest);
                } catch (error) {
                    if (error instanceof SyntaxError) {
                        throw new ParseError({
                            file: this,
                            error,
                            data
                        });
                    } else {
                        throw error;
                    }
                }
            })();
        }
    }
    imports() {
        return __asyncGenerator(this, arguments, function* imports_1() {
            const {statements} = yield __await(this.ast);
            yield __await(yield* __asyncDelegator(__asyncValues(statements.filter(({kind}) => kind === SyntaxKind.ImportDeclaration).map(n => new Import({
                file: this,
                declaration: n
            })))));
        });
    }
    exports() {
        return __asyncGenerator(this, arguments, function* exports_1() {
            const {statements} = yield __await(this.ast);
            yield __await(yield* __asyncDelegator(__asyncValues(statements.filter(({kind}) => kind === SyntaxKind.ExportDeclaration).filter(n => n.moduleSpecifier).map(n => new Export({
                file: this,
                declaration: n
            })))));
        });
    }
    async write(path, options) {
        const sourceFile = await this.ast;
        const {newLine} = this.options;
        const printer = createPrinter({ newLine });
        const data = printer.printNode(EmitHint.SourceFile, sourceFile, sourceFile);
        return writeFile(path === undefined ? this.destination.toString() : path, data, options);
    }
}    //# sourceMappingURL=File.js.map
