var __rest = this && this.__rest || function (s, e) {
    var t = {};
    for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === 'function')
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)
            if (e.indexOf(p[i]) < 0)
                t[p[i]] = s[p[i]];
    return t;
};
import { SyntaxKind } from 'typescript';
import Base from '../Declaration';
export default class Declaration extends Base {
    constructor(_a) {
        var {declaration, file} = _a, rest = __rest(_a, [
                'declaration',
                'file'
            ]);
        if (!declaration.moduleSpecifier) {
            throw new TypeError(`No TS module specifier in '${ file.source }'`);
        }
        const {kind, text} = declaration.moduleSpecifier;
        if (kind !== SyntaxKind.StringLiteral) {
            throw new TypeError(`Invalid TS declaration literal kind '${ kind }' in '${ file.source }'`);
        }
        super(Object.assign({
            declaration,
            file
        }, rest, { path: text }));
    }
    get literal() {
        return this.declaration.moduleSpecifier;
    }
    get path() {
        return this.literal.text;
    }
    update(value) {
        this.literal.text = value;
    }
}    //# sourceMappingURL=Declaration.js.map
