import * as ts from "typescript";
import { DeclarationInterface as Interface, File } from "./convert";
import Path from "./Path";
export interface IDerivedOptions<T extends Interface> {
    declaration: T;
    file: File;
}
export interface IOptions<T extends Interface> extends IDerivedOptions<T> {
    path: string;
}
export default abstract class Declaration<T extends Interface> {
    protected readonly declaration: T;
    readonly file: File;
    private processed;
    readonly original: string;
    constructor({ file, declaration, path }: IOptions<T>);
    readonly isMapped: Promise<boolean>;
    readonly module: Path;
    abstract readonly path: string;
    protected abstract update(value: string): void;
    toString(): string;
    map(options: ts.CompilerOptions): Promise<boolean>;
}
