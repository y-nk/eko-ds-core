var __rest = this && this.__rest || function (s, e) {
    var t = {};
    for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === 'function')
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)
            if (e.indexOf(p[i]) < 0)
                t[p[i]] = s[p[i]];
    return t;
};
import isExportNamedDeclaration from './isExportNamedDeclaration';
import isImportDeclaration from './isImportDeclaration';
import isRequireCallExpression from './isRequireCallExpression';
import isSimpleLiteral from './isSimpleLiteral';
import Base from '../Declaration';
function getLiteral(declaration, file) {
    const literal = isExportNamedDeclaration(declaration) ? declaration.source : isImportDeclaration(declaration) ? declaration.source : isRequireCallExpression(declaration) ? declaration.arguments[0] : undefined;
    if (literal === undefined) {
        throw new TypeError(`Failed to find ES declaration in '${ file.source }'`);
    } else if (!isSimpleLiteral(literal)) {
        const type = literal ? literal.type : 'unknown';
        throw new TypeError(`Invalid ES declaration source type '${ type }' in '${ file.source }'`);
    }
    return literal;
}
export default class Declaration extends Base {
    constructor(_a) {
        var {declaration, file} = _a, rest = __rest(_a, [
                'declaration',
                'file'
            ]);
        const literal = getLiteral(declaration, file);
        if (typeof literal.value !== 'string') {
            throw new TypeError(`The type '${ typeof literal.value }' of the ES source must be 'string' for '${ file.source }'`);
        }
        super(Object.assign({
            declaration,
            file
        }, rest, { path: literal.value }));
    }
    get literal() {
        return getLiteral(this.declaration, this.file);
    }
    get path() {
        return this.literal.value;
    }
    update(value) {
        if (this.literal.raw) {
            this.literal.raw = this.literal.raw.replace(this.path, value);
        }
        this.literal.value = value;
    }
}    //# sourceMappingURL=Declaration.js.map
