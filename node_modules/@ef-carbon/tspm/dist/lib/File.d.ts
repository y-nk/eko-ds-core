/// <reference types="node" />
/// <reference types="node" />
import { PathLike } from "fs";
import { CompilerOptions as ICompilerOptions, ParsedCommandLine as ICompilerConfig } from "typescript";
import { Declaration } from "./convert";
import Path from "./Path";
export interface IDerivedOptions {
    path: string | Path;
    options: ICompilerOptions;
    config: ICompilerConfig;
}
export interface IOptions extends IDerivedOptions {
    extension: string;
}
export default abstract class File<I extends Declaration, E extends Declaration> {
    readonly source: Path;
    protected readonly root: Path;
    protected readonly options: ICompilerOptions;
    protected readonly extension: string;
    constructor({ path, options, config: { fileNames }, extension }: IOptions);
    readonly isMapped: Promise<boolean>;
    abstract imports(): AsyncIterableIterator<I>;
    abstract exports(): AsyncIterableIterator<E>;
    readonly destination: Path;
    abstract write(path?: PathLike | number, options?: {
        encoding?: string | null;
        mode?: number | string;
        flag?: string;
    } | string | null): Promise<void>;
    map(options: ICompilerOptions): AsyncIterableIterator<I | E>;
    toString(): string;
}
