import { basename, dirname, extname, join, relative, resolve } from 'path';
export default class Path {
    constructor(path) {
        this.absolute = resolve(path);
    }
    get path() {
        return this.absolute;
    }
    get name() {
        return basename(this.absolute);
    }
    get directory() {
        return new Path(dirname(this.absolute));
    }
    get parent() {
        return this.directory;
    }
    get extension() {
        return extname(this.absolute);
    }
    set extension(value) {
        if (!value.startsWith('.')) {
            throw Error(`Extension must start with a '.': ${value}`);
        }
        this.absolute = join(this.directory.toString(), `${basename(this.absolute, this.extension)}${value}`);
    }
    relative(base) {
        return relative((base || process.cwd).toString(), this.absolute);
    }
    join(path) {
        return new Path(join(this.absolute, path));
    }
    toString() {
        return this.absolute;
    }
}
//# sourceMappingURL=Path.js.map